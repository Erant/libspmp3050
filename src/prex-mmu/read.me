This is the source for the Prex operating system. 
http://prex.sourceforge.net/

## the automagic way:

first build binutils and gcc, installing them into a local directory:

 run './builder.sh' in the '../toolchain/' directory, this should download and fetch binutils and gcc and install it into a local directory

then configure prex by doing:

 ./configure --target=arm-spmp --cross-compile=`pwd`/../toolchain/install/bin/arm-elf-

## the manual way:

# Building a GCC tool chain

First you'll need to build and install binutils 2.19.1:

1) get the source, unpack to some directory (i.e. src/binutils-2.19.1) [http://ftp.gnu.org/gnu/binutils/binutils-2.19.1.tar.gz]
2) create a temporary directory where you'll be building your binutils (i.e. src/binutils-2.19.1-arm-elf)
3) configure with the following params, i.e.:

	../binutils-2.19.1/configure --prefix=/usr/local/arm --target=arm-elf --disable-nls --with-cpu=arm926ej-s --disable-werror
	
4) type `make` to build the thing
5) type `sudo make install' to install it.

Then you'll have to build GCC, we'll use 4.3.3:

1) get the source and unpack (i.e. src/gcc-4.3.3) [http://ftp.gnu.org/gnu/gcc/gcc-4.3.3/gcc-4.3.3.tar.gz]
2) create a directory to build your gcc (i.e. src/gcc-4.3.3-arm-elf)
3) get dependencies. If you're on ubuntu:

	sudo apt-get install libgmp3-dev libmpfr-dev
	
   otherwise there's some more detailed info over at http://chdk.wikia.com/wiki/Gcc433 regarding installing libgmp and libmpfr
4) configure:

	../gcc-4.3.3/configure --prefix=/usr/local/arm --target=arm-elf --with-gnu-as --with-gnu-ld --with-cpu=arm926ej-s --disable-nls --enable-languages=c --disable-libssp

5) `make`
6) `sudo make install`

congratulations, you now have a working gcc toolchain \o/

If not, bug me (inopia) at #spmpdev

# Building Prex

our target is called arm-spmp, configure with something like

  ./configure --target=arm-spmp --cross-compile=/usr/local/arm/bin/arm-elf-

Then type make en watch the errors fly across the screen. First order of business is getting a bootloader working and outputting
debug information over the uart. We need stubs for all the other architecture dependent stuff. 


